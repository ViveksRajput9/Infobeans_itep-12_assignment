package collectionAsses.Feb7;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.Scanner;

class InvalidAge extends RuntimeException {
	public InvalidAge() {
		super("InvalidAge : age must 1 to 130");
	}
}

class Hospital {
	private int patientId;
	private String name;
	private String disease;
	private int age;

	public Hospital(int patientId, String name, String disease, int age) {
		super();
		this.patientId = patientId;
		this.name = name;
		this.disease = disease;
		this.age = age;
	}

	@Override
	public String toString() {
		return "Hospital [patientId=" + patientId + ", name=" + name + ", disease=" + disease + ", age=" + age + "]";
	}

	public int getPatientId() {
		return patientId;
	}

	public void setPatientId(int patientId) {
		this.patientId = patientId;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getDisease() {
		return disease;
	}

	public void setDisease(String disease) {
		this.disease = disease;
	}

	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		this.age = age;
	}
}
public class Q1 {
	public static Scanner sc = new Scanner(System.in);
	public static ArrayList<Hospital> hospitalPatientData = new ArrayList<>();
	public static String nameInput() {
		 System.out.print("Name :-");
		 String name = sc.nextLine().trim();
		 
		 return (name.isBlank())?nameInput():name;
	}
    public static String diseaseInput() {
    	 System.out.println("Desease :-");
		 String disease = sc.nextLine();
		 return (disease.isBlank())?diseaseInput():disease;
	}
    public static int ageInput() {
    	int age=0;
    	boolean flag = true;
    	try {
    		System.out.println("Age :-");
    		age = Integer.parseInt(sc.nextLine()); 
    		if (age<1||age>130) {
    			flag = false;
    			throw new InvalidAge();
    		}
		}catch (InvalidAge e) {
			flag = false;
			System.out.println(e.getMessage());
		} catch (Exception e) {
			flag = false;
			System.out.println(e.getMessage());
		}
		return (flag)?age:ageInput();
    }
    public static int idInput() {
    	boolean flag = true;
	    System.out.print("Id :-");
	    int patientId=0;
	    try {
	    	patientId = Integer.parseInt(sc.nextLine());
		} catch (Exception e) {
			flag = false;
			System.out.println("Invalid id : id must be integer value");
		}
		return (flag)?patientId:idInput();
    }
    
	public static void addPatient() {
		try {
			
			System.out.println("Enter new patient details");
			try {
				
				String name = nameInput();
				int age = ageInput();
				int patientId = idInput();
				String disease = diseaseInput();
				hospitalPatientData.add(new Hospital(patientId, name, disease, age));
				System.out.println("patient Added successfully");
			}catch (InvalidAge e) {
				System.out.println(e.getMessage());
				return;
			} 
			catch (Exception e) {
				System.out.println(e.getMessage());
				return;
			}

		} catch (InvalidAge e) {
			System.out.println(e.getMessage());
		    return ;
		}catch (Exception e) {
			System.out.println(e.getMessage());
		}
	}

	public static void displayPatientRecords() {
		for (Hospital patientData : hospitalPatientData) {
			System.out.println(patientData);
		}
	}

	public static void searchPatient(String disease) {
		for (Hospital patientData : hospitalPatientData) {
			if (disease.equals(patientData.getDisease()))
				System.out.println(patientData);
			
		}
	}

	public static void dischargedPatient(int id) {
		Iterator<Hospital> itr = hospitalPatientData.iterator();
		boolean flag = false;
		while (itr.hasNext()) {
			Hospital h = itr.next();
			if (h.getPatientId() == id) {
				flag = true;
				itr.remove();
			}
		}
		if (flag)
			System.out.println("remove success");
		else
			System.out.println("No record found");
	}

	public static void getYoungestPatient() {
		if (hospitalPatientData.isEmpty())
			System.out.println("No record found");
		if (hospitalPatientData.size() == 1)
			System.out.println(hospitalPatientData.get(0));
		;
		int youngestAge = hospitalPatientData.get(0).getAge();
		int i;
		Hospital p = hospitalPatientData.get(0);
		for (i = 1; i < hospitalPatientData.size(); i++) {

			int age = hospitalPatientData.get(i).getAge();
			if (youngestAge > age) {
				youngestAge = age;
				p = hospitalPatientData.get(i);
			}
		}
		System.out.println(p);
	}

	public static void main(String[] args) {
		while (true) {
			System.out.println("Do you want to add patient");
			System.out.println("type y for Yes and N for No");
			char c = sc.nextLine().charAt(0);
			if (c == 'n' || c == 'N') {
				break;
			}
			addPatient();
		}
		System.out.println("Records");
		displayPatientRecords();

		System.out.println("Remove/discharged patient :-");
		System.out.print("Enter id:-");
		dischargedPatient(sc.nextInt());
		System.out.println("youngest patient");
		getYoungestPatient();

	}
}